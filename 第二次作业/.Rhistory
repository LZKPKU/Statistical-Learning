knitr::opts_chunk$set(echo = TRUE)
data = read.table(file.choose())
tr = data['train']
data['train']=NULL
data = scale(data,TRUE,TRUE)
train = data[tr$train,]
test = data[!tr$train,]
Xtrain = as.matrix(train[,1:8])
Ytrain = train[,9]
Xtest = as.matrix(test[,1:8])
Xtest = cbind(1,Xtest)
Ytest = test[,9]
cal_err<-function(y,yhat){
len = length(y)
tvar = sum((y-yhat)^2)/len
terr = sqrt(tvar)
stderr = sqrt(sum(((y-yhat)^2-tvar)^2)/(len*(len-1)))
c(terr,stderr)
}
LRM = lm(Ytrain~Xtrain)
summary(LRM)
LRM_coef = LRM$coefficients
yhat = Xtest%*%LRM_coef
LRM_testerr = cal_err(Ytest,yhat)[1]
LRM_stderr = cal_err(Ytest,yhat)[2]
LRM_testerr
LRM_stderr
plot(pressure)
summary(BS)
BS = regsubsets(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=xtrain,method="exhaustive")
library("leaps")
BS = regsubsets(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=xtrain,method="exhaustive")
BS = regsubsets(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=train,method="exhaustive")
library("leaps")
BS = regsubsets(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=xtrain,method="exhaustive")
BS = regsubsets(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=train,method="exhaustive")
train
BS = regsubsets(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=train,method="exhaustive")
BS = regsubsets(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=train,method="exhaustive")
train = data.frame(train)
train
BS = regsubsets(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=train,method="exhaustive")
train = data.frame(train)
BS = regsubsets(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=train,method="exhaustive")
summary(BS)
BS = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=train)
stepAIC(BS,direction = "backward")
library("MASS")
stepAIC(BS,direction = "backward")
stepBIC(BS,direction = "backward")
print("Test error:")
LRM_testerr
BS_coef = BS$coefficients
BS = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=train)
stepAIC(BS,direction = "backward")
BS_coef = BS$coefficients
BS_coef
BS_chosen = stepAIC(BS,direction = "backward")
BS_coef = BS_chosen$coefficients
BS_coef
BS_coef = BS_chosen$coefficients
yhat = Xtest%*%BS_coef
BS_testerr = cal_err(Ytest,yhat)[1]
BS_stderr = cal_err(Ytest,yhat)[2]
Xtest[,8]
Xtest
yhat = Xtest[,-8]%*%BS_coef
BS_testerr = cal_err(Ytest,yhat)[1]
BS_stderr = cal_err(Ytest,yhat)[2]
print("Test error:")
BS_testerr
print("Standard error:")
BS_stderr
BS = lars(Xtrain,Ytrain,type="stepwise",normalize=FALSE)
library("lars")
BS = lars(Xtrain,Ytrain,type="stepwise",normalize=FALSE)
plot(BS)
plot(BS$RSS)
BScv=cv.lars(Xtrain,Ytrain,type='stepwise')
summary(BScv)
plot(BScv)
plot(BScv)
BScv=cv.lars(Xtrain,Ytrain,K=10,type='stepwise')
s = BScv$index[k]
k = which(BScv$cv == min(BScv$cv))
s = BScv$index[k]
abline(v=s)
myplot(BS,breaks = FALSE)
plot(BS,breaks = FALSE)
abline(v=s,col='red')
coef(BS,s=s,mode = 'fraction')
BScv=cv.lars(Xtrain,Ytrain,K=10,type='stepwise')
k = which(BScv$cv == min(BScv$cv))
myplot
myplot(BS)
BS = lars(Xtrain,Ytrain,type="stepwise",normalize=FALSE)
BScv=cv.lars(Xtrain,Ytrain,K=10,type='stepwise')
k = which(BScv$cv == min(BScv$cv))
k
s = BScv$index[k]
s = BScv$index[k]
coef(BS,s=s,mode = 'fraction')
BS
coef(BScv,s=s,mode = 'fraction')
coef(BScv)
coef(BS,s=s)
yhat = Xtest%*%BS_coef
BS_coef = coef(BS,s=s)
yhat = Xtest%*%BS_coef
BS_coef
X_test
Xtest
BS = lars(Xtrain,Ytrain,type="stepwise",normalize=FALSE)
BS
BS = lars(Xtrain,Ytrain,type="stepwise",normalize=FALSE,intercept = TRUE)
BS
BScv=cv.lars(Xtrain,Ytrain,K=10,type='stepwise',intercept = TRUE)
k = which(BScv$cv == min(BScv$cv))
s = BScv$index[k]
BS_coef = coef(BS,s=s)
BS_coef
yhat = Xtest[,-1]%*%BS_coef
BS_testerr = cal_err(Ytest,yhat)[1]
BS_stderr = cal_err(Ytest,yhat)[2]
cal_err(Ytest,yhat)[2]
cal_err(Ytest,yhat)
library("glmnet")
library("glmnet")
RR = glmnet(x = Xtrain,y = Ytrain,family="gaussian",alpha=0)
summary(RR)
plot(RR,xvar = "lambda")
RRcv = cv.glmnet(x=Xtrain,y=Ytrain,family = "gaussian",alpha = 0,nfold=10)
plot(RRcv)
RR_chosen = glmnet(x=Xtrain,y=Ytrain,family="gaussian",alpha=0,lambda=RRcv$lambda.min)
RR_coef = coef(RR_chosen,mode="fraction")
yhat = Xtest%*%RR_coef
RR_testerr = cal_err(Ytest,yhat)[1]
RR_stderr = cal_err(Ytest,yhat)[2]
print("Test error:")
RR_testerr
print("Standard error:")
RR_stderr
RR_coef = coef(RR_chosen,mode="fraction")
RR_coef
lasso = glmnet(x=Xtrain,y=Ytrain,family="gaussian",alpha=1)
plot(lasso,xvar="lambda")
lassocv = cv.glmnet(x=Xtrain,y=Ytrain,family="gaussian",alpha=1)
plot(lassocv)
lasso_chosen = glmnet(x=Xtrain,y=Ytrain,family="gaussian",alpha=1,lambda = lassocv$lambda.min)
lasso_coef = coef(lasso_chosen)
yhat = Xtest%*%lasso_coef
lasso_testerr = cal_err(Ytest,yhat)[1]
print("Test error:")
print("Standard error:")
lasso_stderr
lasso_stderr = cal_err(Ytest,yhat)[2]
lasso_testerr
lasso_stderr
lasso_chosen = glmnet(x=Xtrain,y=Ytrain,family="gaussian",alpha=1,lambda = lassocv$lambda.1se)
lasso_coef = coef(lasso_chosen)
yhat = Xtest%*%lasso_coef
lasso_testerr = cal_err(Ytest,yhat)[1]
lasso_stderr = cal_err(Ytest,yhat)[2]
print("Test error:")
lasso_testerr
print("Standard error:")
lasso_stderr
lasso_coef
lasso_coef
knitr::opts_chunk$set(echo = TRUE)
library("lars")
library("glmnet")
library("leaps")
data = read.table(file.choose())
tr = data['train']
data['train']=NULL
Y = data['lspa']
data
Y = data['lpsa']
data['lpsa']=NULL
data = scale(data,TRUE,TRUE)
train = data[tr$train,]
test = data[!tr$train,]
Xtrain = as.matrix(train[,1:8])
Ytrain = Y[tr$train,]
Xtest = as.matrix(test[,1:8])
Xtest = cbind(1,Xtest)
Ytest = Y[!tr$train,]
Ytest
cal_err<-function(y,yhat){
len = length(y)
tvar = sum((y-yhat)^2)/len
terr = sqrt(tvar)
stderr = sqrt(sum(((y-yhat)^2-tvar)^2)/(len*(len-1)))
c(terr,stderr)
}
LRM = lm(Ytrain~Xtrain)
summary(LRM)
LRM_coef = LRM$coefficients
LRM_coef
yhat = Xtest%*%LRM_coef
LRM_testerr = cal_err(Ytest,yhat)[1]
LRM_stderr = cal_err(Ytest,yhat)[2]
LRM_testerr
LRM_stderr
cal_err<-function(y,yhat){
len = length(y)
tvar = (sum((y-yhat)^2))/len
terr = sqrt(tvar)
stderr = sqrt(sum(((y-yhat)^2-tvar)^2)/(len*(len-1)))
c(terr,stderr)
}
LRM_testerr = cal_err(Ytest,yhat)[1]
LRM_stderr = cal_err(Ytest,yhat)[2]
LRM_testerr
LRM_stderr
train = data.frame(train)
BS = regsubsets(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=train,method="exhaustive")
data
data[,'lpsa']=Y
data[,'lpsa']=list(Y)
??scale
rawdata = read.table(file.choose())
tr = rawdata['train']
rawdata['train']=NULL
Y = rawdata['lpsa']
data = rawdata[1:8]
data
data = scale(data,TRUE,TRUE)
train = data[tr$train,]
test = data[!tr$train,]
Xtrain = as.matrix(train[,1:8])
Ytrain = Y[tr$train,]
Xtest = as.matrix(test[,1:8])
Xtest = cbind(1,Xtest)
Ytest = Y[!tr$train,]
cal_err<-function(y,yhat){
len = length(y)
tvar = (sum((y-yhat)^2))/len
terr = sqrt(tvar)
stderr = sqrt(sum(((y-yhat)^2-tvar)^2)/(len*(len-1)))
c(terr,stderr)
}
LRM = lm(Ytrain~Xtrain)
summary(LRM)
LRM_coef = LRM$coefficients
LRM_coef
LRM_testerr = cal_err(Ytest,yhat)[1]
LRM_testerr
LRM_stderr
train = data.frame(train)
BS = regsubsets(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=rawdata,method="exhaustive")
summary(BS)
BS = lars(Xtrain,Ytrain,type="stepwise",normalize=FALSE)
BScv=cv.lars(Xtrain,Ytrain,K=10,type='stepwise')
k = which(BScv$cv == min(BScv$cv))
s = BScv$index[k]
BS_coef = coef(BS,s=s)
BS_coef
yhat = Xtest[,-1]%*%BS_coef
BS_testerr = cal_err(Ytest,yhat)[1]
BS_stderr = cal_err(Ytest,yhat)[2]
BS_stderr
BS_stderr
BS_testerr
yhat = Xtest[,-2]%*%BS_coef
BS_testerr = cal_err(Ytest,yhat)[1]
BS_stderr = cal_err(Ytest,yhat)[2]
BS_testerr
BS_stderr
BS_coef
yhat = Xtest[,-1]%*%BS_coef
Xtest
BS_testerr = cal_err(Ytest,yhat)[1]
BS_stderr = cal_err(Ytest,yhat)[2]
BS_testerr
BS_stderr
BS = lars(Xtrain,Ytrain,type="stepwise",normalize=TRUE)
BScv=cv.lars(Xtrain,Ytrain,K=10,type='stepwise')
k = which(BScv$cv == min(BScv$cv))
s = BScv$index[k]
BS_coef = coef(BS,s=s)
BS_coef
yhat = Xtest[,-1]%*%BS_coef
BS_testerr = cal_err(Ytest,yhat)[1]
BS_stderr = cal_err(Ytest,yhat)[2]
BS_testerr
BS_stderr
k = which(BScv$cv == min(BScv$cv))
BScv=cv.lars(Xtrain,Ytrain,K=10,type='stepwise')
BScv
BS
BS = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=train)
BS = lm(Ytrain~Xtrain)
BS_chosen = stepAIC(BS,direction = "backward")
library("MASS")
BS_chosen = stepAIC(BS,direction = "backward")
BS = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=rawdata)
BS_chosen = stepAIC(BS,direction = "backward")
BS = lm(Ytrain~Xtrain[,2]+Xtrain[,3])
BS
BS = lm(Ytrain~rawdata[,1]+rawdata[,2])
BS
BS = lm(Ytrain~rawdata[,1]+rawdata[,2])
rawdata
tr = rawdata['train']
rawdata['train']=NULL
Y = rawdata['lpsa']
data = rawdata[,1:8]
data = scale(data,TRUE,TRUE)
train = data[tr$train,]
test = data[!tr$train,]
Xtrain = as.matrix(train[,1:8])
Ytrain = Y[tr$train,]
Xtest = as.matrix(test[,1:8])
Xtest = cbind(1,Xtest)
Ytest = Y[!tr$train,]
len = length(y)
cal_err<-function(y,yhat){
len = length(y)
tvar = (sum((y-yhat)^2))/len
terr = sqrt(tvar)
stderr = sqrt(sum(((y-yhat)^2-tvar)^2)/(len*(len-1)))
c(terr,stderr)
}
LRM = lm(Ytrain~Xtrain)
summary(LRM)
LRM_coef = LRM$coefficients
LRM_coef
yhat = Xtest%*%LRM_coef
LRM_testerr = cal_err(Ytest,yhat)[1]
LRM_stderr = cal_err(Ytest,yhat)[2]
LRM_testerr
LRM_stderr
train = data.frame(train)
BS = regsubsets(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=rawdata,method="exhaustive")
summary(BS)
Xtrain
Ytrain
BS = lm(Ytrain~Xtrain)
=
BS_chosen = stepAIC(BS,direction = "backward")
BS_coef = BS_chosen$coefficients
BS_coef
yhat = Xtest[,-8]%*%BS_coef
BS_testerr = cal_err(Ytest,yhat)[1]
BS_stderr = cal_err(Ytest,yhat)[2]
BS = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=rawdata)
BS_chosen = stepAIC(BS,direction = "backward")
yhat = Xtest[,-(6:8)]%*%BS_coef
Xtest[,-(6:8)]
BS_coef
BS_coef = BS_chosen$coefficients
BS_coef
yhat = Xtest[,-(6:8)]%*%BS_coef
BS_testerr = cal_err(Ytest,yhat)[1]
BS_stderr = cal_err(Ytest,yhat)[2]
BS_testerr
BS_stderr
BS = lm(Xtrain~Ytrain)
BS_chosen = stepAIC(BS,direction = "backward")
BS = lm(Xtrain~Ytrain)
BS_chosen = stepAIC(BS,direction = "backward")
BS = lm(Ytrain~Xtrain)
BS_chosen = stepAIC(BS,direction = "backward")
BS_coef = BS_chosen$coefficients
BS_coef
BS_testerr = cal_err(Ytest,yhat)[1]
BS_testerr
BS_stderr
BS_coef = BS_chosen$coefficients
BS_coef
yhat = Xtest%*%BS_coef
BS_testerr = cal_err(Ytest,yhat)[1]
BS_stderr = cal_err(Ytest,yhat)[2]
BS_testerr
BS_stderr
BS = lars(Xtrain,Ytrain,type="stepwise",normalize=TRUE)
BS
BScv=cv.lars(Xtrain,Ytrain,K=10,type='stepwise')
BS = lm(Ytrain~rawdata[,1]+rawdata[,2])
BS = lm(lpsa~lcavol+lweight,data=rawdata)
BS
BS = lm(Ytrain~data['lcavol']+data['lweight'])
BS = lm(Ytrain~Xtrain['lcavol']+Xtrain['lweight'])
Xtrain['lcavol']
BS = lm(Ytrain~Xtrain[,1]+Xtrain[,2])
BS
BS_coef = coef(BS)
BS_coef
yhat = Xtest[,1:3]%*%BS_coef
BS_testerr = cal_err(Ytest,yhat)[1]
BS_stderr = cal_err(Ytest,yhat)[2]
BS_testerr
BS_stderr
BS_testerr = cal_err(Ytest,yhat)[1]
BS_stderr = cal_err(Ytest,yhat)[2]
BS_testerr
BS_stderr
len(Ytest)
length(Ytest)
cal_err<-function(y,yhat){
len = length(y)
tvar = (sum((y-yhat)^2))/(len-1)
terr = sqrt(tvar)
stderr = sqrt(sum(((y-yhat)^2-tvar)^2)/(len*(len-1)))
c(terr,stderr)
}
BS_testerr = cal_err(Ytest,yhat)[1]
BS_stderr = cal_err(Ytest,yhat)[2]
BS_testerr
BS_stderr
cal_err<-function(y,yhat){
len = length(y)
tvar = (sum((y-yhat)^2))/len
terr = sqrt(tvar)
stderr = sqrt(sum(((y-yhat)^2-tvar)^2)/(len*(len-1)))
c(tvar,stderr)
}
BS = lm(Ytrain~Xtrain[,1]+Xtrain[,2])
BS_coef = coef(BS)
yhat = Xtest[,1:3]%*%BS_coef
BS_testerr = cal_err(Ytest,yhat)[1]
BS_testerr
BS_stderr
RR = glmnet(x = Xtrain,y = Ytrain,family="gaussian",alpha=0)
plot(RR,xvar = "lambda")
RRcv = cv.glmnet(x=Xtrain,y=Ytrain,family = "gaussian",alpha = 0,nfold=10)
RRcv = cv.glmnet(x=Xtrain,y=Ytrain,family = "gaussian",alpha = 0,nfold=10)
plot(RRcv)
RR_chosen = glmnet(x=Xtrain,y=Ytrain,family="gaussian",alpha=0,lambda=RRcv$lambda.min)
RR_coef = coef(RR_chosen,mode="fraction")
RR_coef
yhat = Xtest%*%RR_coef
RR_testerr = cal_err(Ytest,yhat)[1]
RR_stderr = cal_err(Ytest,yhat)[2]
RR_testerr
RR_stderr
lasso = glmnet(x=Xtrain,y=Ytrain,family="gaussian",alpha=1)
lassocv = cv.glmnet(x=Xtrain,y=Ytrain,family="gaussian",alpha=1)
plot(lassocv)
lasso_chosen = glmnet(x=Xtrain,y=Ytrain,family="gaussian",alpha=1,lambda = lassocv$lambda.min)
lasso_coef = coef(lasso_chosen)
lasso_coef
yhat = Xtest%*%lasso_coef
lasso_testerr = cal_err(Ytest,yhat)[1]
lasso_stderr = cal_err(Ytest,yhat)[2]
lasso_testerr
lasso_stderr
lasso_chosen = glmnet(x=Xtrain,y=Ytrain,family="gaussian",alpha=1,lambda = lassocv$lambda.1se)
lasso_coef = coef(lasso_chosen)
lasso_coef
yhat = Xtest%*%lasso_coef
lasso_testerr = cal_err(Ytest,yhat)[1]
lasso_stderr = cal_err(Ytest,yhat)[2]
lasso_testerr
lasso_stderr
