ratio = 0.1
df = 8
H = ss(X,df)
s = sample(n,n*ratio)
model = qda(X[-s,],X[-s])
model = qda(X[-s,],Y[-s])
t=0
for(i in s){
if(predict(model,X[j,])$class==X[j]){
t=t+1
}
}
for(i in s){
if(predict(model,X[i,])$class==X[i]){
t=t+1
}
}
rbind(cv,t/(n*0.1))
t
for(i in s){
if(predict(model,X[i,])$class==Y[i]){
t=t+1
}
}
t
rbind(cv,t/(n*0.1))
cv=data.frame()
rbind(cv,t/(n*0.1))
cv=data.factor()
cv=factor()
rbind(cv,t/(n*0.1))
df=16
H = ss(X,df)
s = sample(n,n*ratio)
model = qda(X[-s,],Y[-s])
t=0
for(i in s){
if(predict(model,X[i,])$class==Y[i]){
t=t+1
}
}
t
rbind(cv,t/(n*0.1))
cv
df=16
H = ss(X,df)
s = sample(n,n*ratio)
model = qda(X[-s,],Y[-s])
t=0
for(i in s){
if(predict(model,X[i,])$class==Y[i]){
t=t+1
}
}
t
cv = c(cv,t/n*ratio)
df = 8
H = ss(X,df)
s = sample(n,n*ratio)
model = qda(X[-s,],Y[-s])
t=0
for(i in s){
if(predict(model,X[i,])$class==Y[i]){
t=t+1
}
}
t
cv = c(cv,t/n*ratio)
model$prior
model
model$y
model$x
??qda
n = nrow(data)
ss = function(x,df){
f=1:256
basis = ns(f,
knots=seq(8,248,length.out = df+1)[2:df],
Boundary.knots = c(8,248)
)
H = matrix(0,nrow=n,ncol=df+1)
for(i in 1:n){
mo = lm(x[i,]~basis)
H[i,] = mo$coefficients
}
return(H)
}
dfarray=c(8,16,24,32,40)
cv=factor()
ratio = 0.1
df = 8
df=16
H = ss(X,df)
s = sample(n,n*ratio)
model = qda(X[-s,],Y[-s])
t=0
for(i in s){
if(predict(model,X[i,])$class==Y[i]){
t=t+1
}
}
t
cv = c(cv,t/n*ratio)
cv = c(cv,count/n*ratio)
library(MASS)
library(splines)
data = read.csv(file.choose())
n = nrow(data)
X = as.matrix(data[1:nrow(data),2:257])
Y = data[1:nrow(data),258]
ss = function(x,df){
f=1:256
basis = ns(f,
knots=seq(8,248,length.out = df+1)[2:df],
Boundary.knots = c(8,248)
)
H = matrix(0,nrow=n,ncol=df+1)
for(i in 1:n){
mo = lm(x[i,]~basis)
H[i,] = mo$coefficients
}
return(H)
}
dfarray=c(8,16,24,32,40)
cv=factor()
ratio = 0.1
for(df in dfarray){
H = ss(X,df)
s = sample(n,n*ratio)
model = qda(X[-s,],Y[-s])
count=0
for(i in s){
if(predict(model,X[i,])$class==Y[i]){
count=count+1
}
}
count
cv = c(cv,count/n*ratio)
}
library(MASS)
library(splines)
data = read.csv("data.txt")
setwd("E:\My University\My Course\2017-2018第一学期\统计学习\第四次作业")
setwd("E:\\My University\\My Course\\2017-2018第一学期\\统计学习\\第四次作业")
data = read.csv("data.txt")
n = nrow(data)
X = as.matrix(data[1:nrow(data),2:257])
Y = data[1:nrow(data),258]
ratio = 0.1
s = sample(n,n*ratio)
ss = function(x,df){
f=1:256
basis = ns(f,
knots=seq(8,248,length.out = df+1)[2:df],
Boundary.knots = c(8,248)
)
H = matrix(0,nrow=n,ncol=df+1)
for(i in 1:n){
mo = lm(x[i,]~basis)
H[i,] = mo$coefficients
}
return(H)
}
dfarray=c(8,16,24,32,40)
cv=factor()
for(df in dfarray){
H = ss(X,df)
model = qda(X[-s,],Y[-s],CV=TRUE)
count=0
for(i in s){
if(predict(model,X[i,])$class==Y[i]){
count=count+1
}
}
count
cv = c(cv,count/(n*ratio))
}
library(MASS)
library(splines)
setwd("E:\\My University\\My Course\\2017-2018第一学期\\统计学习\\第四次作业")
data = read.csv("data.txt")
n = nrow(data)
X = as.matrix(data[1:nrow(data),2:257])
Y = data[1:nrow(data),258]
ratio = 0.1
s = sample(n,n*ratio)
ss = function(x,df){
f=1:256
basis = ns(f,
knots=seq(8,248,length.out = df+1)[2:df],
Boundary.knots = c(8,248)
)
H = matrix(0,nrow=n,ncol=df+1)
for(i in 1:n){
mo = lm(x[i,]~basis)
H[i,] = mo$coefficients
}
return(H)
}
dfarray=c(8,16,24,32,40)
cv=factor()
for(df in dfarray){
H = ss(X,df)
model = qda(H[-s,],Y[-s],CV=TRUE)
count=0
for(i in s){
if(predict(model,H[i,])$class==Y[i]){
count=count+1
}
}
count
cv = c(cv,count/(n*ratio))
}
for(df in dfarray){
H = ss(X,df)
model = qda(H[-s,],Y[-s])
count=0
for(i in s){
if(predict(model,H[i,])$class==Y[i]){
count=count+1
}
}
count
cv = c(cv,count/(n*ratio))
}
cv
library(MASS)
library(splines)
setwd("E:\\My University\\My Course\\2017-2018第一学期\\统计学习\\第四次作业")
data = read.csv("data.txt")
n = nrow(data)
X = as.matrix(data[1:nrow(data),2:257])
Y = data[1:nrow(data),258]
ratio = 0.1
s = sample(n,n*ratio)
ss = function(x,df){
f=1:256
basis = ns(f,
knots=seq(8,248,length.out = df+1)[2:df],
Boundary.knots = c(8,248)
)
H = matrix(0,nrow=n,ncol=df+1)
for(i in 1:n){
mo = lm(x[i,]~basis)
H[i,] = mo$coefficients
}
return(H)
}
dfarray=c(8,16,24,32,40)
cv=factor()
for(df in dfarray){
H = ss(X,df)
model = qda(H[-s,],Y[-s])
count=0
for(i in s){
if(predict(model,H[i,])$class==Y[i]){
count=count+1
}
}
count
cv = c(cv,count/(n*ratio))
}
cv
train_data=data[1:3500,]
train_data=X[1:3500,]
test_data = X[3501:4509,]
library(MASS)
library(splines)
setwd("E:\\My University\\My Course\\2017-2018第一学期\\统计学习\\第四次作业")
data = read.csv("data.txt")
n = nrow(data)
X = as.matrix(data[1:nrow(data),2:257])
Y = data[1:nrow(data),258]
train_data= X[1:3500,]
test_data = X[3501:4509,]
ss = function(x,df){
f=1:256
basis = ns(f,
knots=seq(8,248,length.out = df+1)[2:df],
Boundary.knots = c(8,248)
)
H = matrix(0,nrow=n,ncol=df+1)
for(i in 1:n){
mo = lm(x[i,]~basis)
H[i,] = mo$coefficients
}
return(H)
}
train = 3501:4509
for(i in 1:10){
fold[i] = ((i-1)*350+1):(i*350)
}
fold = factor()
for(i in 1:10){
fold[i] = ((i-1)*350+1):(i*350)
}
fold = vector()
for(i in 1:10){
fold[i] = ((i-1)*350+1):(i*350)
}
fold[1] = 1:350
fold[,1] = 1:350
fold=0
fold[,1] = 1:350
fold=matrix[0,350,10]
fold[,1] = 1:350
fold=matrix[0,nrow=350,ncol=10]
fold=matrix[0,nrow=350,ncol=10]
library(MASS)
library(splines)
setwd("E:\\My University\\My Course\\2017-2018第一学期\\统计学习\\第四次作业")
data = read.csv("data.txt")
n = nrow(data)
X = as.matrix(data[1:nrow(data),2:257])
Y = data[1:nrow(data),258]
train = 3501:4509
fold=matrix[0,nrow=350,ncol=10]
fold=matrix(0,nrow=350,ncol=10)
fold[,1] = 1:350
for(i in 1:10)
fold[,i] = (i-1)*350+1:i*350
for(i in 1:10)
fold[,i] = ((i-1)*350+1):(i*350)
View(fold)
df=16
H = ss(X,df)
ss = function(x,df){
f=1:256
basis = ns(f,
knots=seq(8,248,length.out = df+1)[2:df],
Boundary.knots = c(8,248)
)
H = matrix(0,nrow=n,ncol=df+1)
for(i in 1:n){
mo = lm(x[i,]~basis)
H[i,] = mo$coefficients
}
return(H)
}
H = ss(X,df)
test_data = H[-train,]
s = fold[2,]
s = fold[,2]
model = qda(H[-s,],Y[-s])
count=0
model = qda(H[-s,],Y[-s])
model
X = as.matrix(data[1:4500,2:257])
Y = data[1:nrow(data),258]
fold=matrix(0,nrow=450,ncol=10)
for(i in 1:10)
for(i in 1:10)
fold[,i] = ((i-1)*450+1):(i*450)
ss = function(x,df){
f=1:256
basis = ns(f,
knots=seq(8,248,length.out = df+1)[2:df],
Boundary.knots = c(8,248)
)
H = matrix(0,nrow=n,ncol=df+1)
for(i in 1:n){
mo = lm(x[i,]~basis)
H[i,] = mo$coefficients
}
return(H)
}
df=16
H = ss(X,df)
s = fold[,i]
s = fold[,1]
n = 4500
setwd("E:\\My University\\My Course\\2017-2018第一学期\\统计学习\\第四次作业")
data = read.csv("data.txt")
n = 4500
X = as.matrix(data[1:n,2:257])
Y = data[1:n,258]
fold=matrix(0,nrow=450,ncol=10)
for(i in 1:10)
fold[,i] = ((i-1)*450+1):(i*450)
ss = function(x,df){
f=1:256
basis = ns(f,
knots=seq(8,248,length.out = df+1)[2:df],
Boundary.knots = c(8,248)
)
H = matrix(0,nrow=n,ncol=df+1)
for(i in 1:n){
mo = lm(x[i,]~basis)
H[i,] = mo$coefficients
}
return(H)
}
dfarray=c(8,16,24,32,40)
cv=factor()
df=16
H = ss(X,df)
s = fold[,1]
model = qda(H[-s,],Y[-s])
H = ss(X,df)
count=0
for(i in 1:10){
s = fold[,i]
model = qda(H[-s,],Y[-s])
for(i in s){
if(predict(model,H[i,])$class==Y[i]){
count=count+1
}
}
}
H = ss(X,df)
H = ss(X,df)
count=0
for(i in 1:10){
s = fold[,i]
model = qda(H[-s,],Y[-s])
for(j in s){
if(predict(model,H[j,])$class==Y[j]){
count=count+1
}
}
}
cv = c(cv,count/n)
cv
library(MASS)
library(splines)
setwd("E:\\My University\\My Course\\2017-2018第一学期\\统计学习\\第四次作业")
data = read.csv("data.txt")
n = 4500
X = as.matrix(data[1:n,2:257])
Y = data[1:n,258]
fold=matrix(0,nrow=450,ncol=10)
for(i in 1:10)
fold[,i] = ((i-1)*450+1):(i*450)
ss = function(x,df){
f=1:256
basis = ns(f,
knots=seq(8,248,length.out = df+1)[2:df],
Boundary.knots = c(8,248)
)
H = matrix(0,nrow=n,ncol=df+1)
for(i in 1:n){
mo = lm(x[i,]~basis)
H[i,] = mo$coefficients
}
return(H)
}
dfarray=c(8,16,24,32,40)
cv=0
df=16
for(df in dfarray){
H = ss(X,df)
count=0
for(i in 1:10){
s = fold[,i]
model = qda(H[-s,],Y[-s])
for(j in s){
if(predict(model,H[j,])$class==Y[j]){
count=count+1
}
}
}
cv = c(cv,count/n)
}
cv
ss = function(x,df){
f=1:256
basis = ns(f,
knots=seq(8,248,length.out = df)[2:df],
Boundary.knots = c(8,248)
)
H = matrix(0,nrow=n,ncol=df+1)
for(i in 1:n){
mo = lm(x[i,]~basis)
H[i,] = mo$coefficients
}
return(H)
}
df=16
H = ss(X,df)
ss = function(x,df){
f=1:256
basis = ns(f,
knots=seq(8,248,length.out = df)[2:df-1],
Boundary.knots = c(8,248)
)
H = matrix(0,nrow=n,ncol=df+1)
for(i in 1:n){
mo = lm(x[i,]~basis)
H[i,] = mo$coefficients
}
return(H)
}
df=16
H = ss(X,df)
s = fold[,i]
model = qda(H[-s,],Y[-s])
ss = function(x,df){
f=1:256
basis = ns(f,
knots=seq(8,248,length.out = df)[2:(df-1)],
Boundary.knots = c(8,248)
)
H = matrix(0,nrow=n,ncol=df+1)
for(i in 1:n){
mo = lm(x[i,]~basis)
H[i,] = mo$coefficients
}
return(H)
}
df=16
H = ss(X,df)
count=0
